<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/entity/User.java" />
              <option name="originalContent" value="package com.restaurant.reservation.entity;&#10;&#10;import jakarta.persistence.*;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.jpa.domain.support.AuditingEntityListener;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * 사용자 정보를 담는 엔티티&#10; * Oracle DB의 USERS 테이블과 매핑됩니다.&#10; */&#10;@Entity&#10;@Table(name = &quot;USERS&quot;)&#10;@EntityListeners(AuditingEntityListener.class)&#10;public class User {&#10;&#10;    @Id&#10;    @Column(name = &quot;USER_ID&quot;, length = 15, nullable = false)&#10;    private String userId;&#10;&#10;    @Column(name = &quot;USER_NAME&quot;, length = 20, nullable = false)&#10;    private String userName;&#10;&#10;    @Column(name = &quot;PHONE_NUMBER&quot;, length = 20, nullable = false)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;USER_LOCATION&quot;, length = 50)&#10;    private String userLocation;&#10;&#10;    @Column(name = &quot;PASSWORD&quot;, length = 255, nullable = false)&#10;    private String password;&#10;&#10;    @Column(name = &quot;IS_ACTIVE&quot;)&#10;    private Boolean isActive = true;&#10;&#10;    @CreatedDate&#10;    @Column(name = &quot;CREATED_AT&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @LastModifiedDate&#10;    @Column(name = &quot;UPDATED_AT&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    // 관계 매핑&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Favorite&gt; favorites = new ArrayList&lt;&gt;();&#10;&#10;    // 기본 생성자&#10;    public User() {}&#10;&#10;    // 생성자&#10;    public User(String userId, String userName, String phoneNumber, String userLocation, String password) {&#10;        this.userId = userId;&#10;        this.userName = userName;&#10;        this.phoneNumber = phoneNumber;&#10;        this.userLocation = userLocation;&#10;        this.password = password;&#10;        this.isActive = true;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getUserName() {&#10;        return userName;&#10;    }&#10;&#10;    public void setUserName(String userName) {&#10;        this.userName = userName;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getUserLocation() {&#10;        return userLocation;&#10;    }&#10;&#10;    public void setUserLocation(String userLocation) {&#10;        this.userLocation = userLocation;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public Boolean getIsActive() {&#10;        return isActive;&#10;    }&#10;&#10;    public void setIsActive(Boolean isActive) {&#10;        this.isActive = isActive;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public List&lt;Booking&gt; getBookings() {&#10;        return bookings;&#10;    }&#10;&#10;    public void setBookings(List&lt;Booking&gt; bookings) {&#10;        this.bookings = bookings;&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviews() {&#10;        return reviews;&#10;    }&#10;&#10;    public void setReviews(List&lt;Review&gt; reviews) {&#10;        this.reviews = reviews;&#10;    }&#10;&#10;    public List&lt;Favorite&gt; getFavorites() {&#10;        return favorites;&#10;    }&#10;&#10;    public void setFavorites(List&lt;Favorite&gt; favorites) {&#10;        this.favorites = favorites;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId='&quot; + userId + '\'' +&#10;                &quot;, userName='&quot; + userName + '\'' +&#10;                &quot;, phoneNumber='&quot; + phoneNumber + '\'' +&#10;                &quot;, userLocation='&quot; + userLocation + '\'' +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.restaurant.reservation.entity;&#10;&#10;import jakarta.persistence.*;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.jpa.domain.support.AuditingEntityListener;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * 사용자 정보를 담는 엔티티&#10; * Oracle DB의 USERS 테이블과 매핑됩니다.&#10; */&#10;@Entity&#10;@Table(name = &quot;USERS&quot;)&#10;@EntityListeners(AuditingEntityListener.class)&#10;public class User {&#10;&#10;    @Id&#10;    @Column(name = &quot;USER_ID&quot;, length = 15, nullable = false)&#10;    private String userId;&#10;&#10;    @Column(name = &quot;USER_NAME&quot;, length = 20, nullable = false)&#10;    private String userName;&#10;&#10;    @Column(name = &quot;PHONE_NUMBER&quot;, length = 20, nullable = false)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;USER_LOCATION&quot;, length = 50)&#10;    private String userLocation;&#10;&#10;    @Column(name = &quot;PASSWORD&quot;, length = 255, nullable = false)&#10;    private String password;&#10;&#10;    @Column(name = &quot;IS_ACTIVE&quot;)&#10;    private Boolean isActive = true;&#10;&#10;    @CreatedDate&#10;    @Column(name = &quot;CREATED_AT&quot;)&#10;    private LocalDateTime createdAt;&#10;&#10;    @LastModifiedDate&#10;    @Column(name = &quot;UPDATED_AT&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    // 관계 매핑&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)&#10;    private List&lt;Favorite&gt; favorites = new ArrayList&lt;&gt;();&#10;&#10;    // 기본 생성자&#10;    public User() {}&#10;&#10;    // 생성자&#10;    public User(String userId, String userName, String phoneNumber, String userLocation, String password) {&#10;        this.userId = userId;&#10;        this.userName = userName;&#10;        this.phoneNumber = phoneNumber;&#10;        this.userLocation = userLocation;&#10;        this.password = password;&#10;        this.isActive = true;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public String getUserName() {&#10;        return userName;&#10;    }&#10;&#10;    public void setUserName(String userName) {&#10;        this.userName = userName;&#10;    }&#10;&#10;    public String getPhoneNumber() {&#10;        return phoneNumber;&#10;    }&#10;&#10;    public void setPhoneNumber(String phoneNumber) {&#10;        this.phoneNumber = phoneNumber;&#10;    }&#10;&#10;    public String getUserLocation() {&#10;        return userLocation;&#10;    }&#10;&#10;    public void setUserLocation(String userLocation) {&#10;        this.userLocation = userLocation;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public Boolean getIsActive() {&#10;        return isActive;&#10;    }&#10;&#10;    public void setIsActive(Boolean isActive) {&#10;        this.isActive = isActive;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public List&lt;Booking&gt; getBookings() {&#10;        return bookings;&#10;    }&#10;&#10;    public void setBookings(List&lt;Booking&gt; bookings) {&#10;        this.bookings = bookings;&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviews() {&#10;        return reviews;&#10;    }&#10;&#10;    public void setReviews(List&lt;Review&gt; reviews) {&#10;        this.reviews = reviews;&#10;    }&#10;&#10;    public List&lt;Favorite&gt; getFavorites() {&#10;        return favorites;&#10;    }&#10;&#10;    public void setFavorites(List&lt;Favorite&gt; favorites) {&#10;        this.favorites = favorites;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;User{&quot; +&#10;                &quot;userId='&quot; + userId + '\'' +&#10;                &quot;, userName='&quot; + userName + '\'' +&#10;                &quot;, phoneNumber='&quot; + phoneNumber + '\'' +&#10;                &quot;, userLocation='&quot; + userLocation + '\'' +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/repository/UserRepository.java" />
              <option name="originalContent" value="package com.restaurant.reservation.repository;&#10;&#10;import com.restaurant.reservation.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * 사용자 정보를 관리하는 Repository&#10; * User 엔티티에 대한 데이터베이스 작업을 담당합니다.&#10; */&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;&#10;    /**&#10;     * 활성화된 사용자 목록 조회&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrue();&#10;&#10;    /**&#10;     * 전화번호로 사용자 검색&#10;     */&#10;    Optional&lt;User&gt; findByPhoneNumber(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByPhoneNumberAndIsActiveTrue(String phoneNumber);&#10;&#10;    /**&#10;     * 사용자 이름으로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByUserNameContainingIgnoreCase(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름으로 검색&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndUserNameContainingIgnoreCase(String userName);&#10;&#10;    /**&#10;     * 사용자 위치로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByUserLocationContainingIgnoreCase(String userLocation);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 위치로 검색&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndUserLocationContainingIgnoreCase(String userLocation);&#10;&#10;    /**&#10;     * 전화번호 존재 여부 확인&#10;     */&#10;    boolean existsByPhoneNumber(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호 존재 여부 확인&#10;     */&#10;    boolean existsByPhoneNumberAndIsActiveTrue(String phoneNumber);&#10;&#10;    /**&#10;     * 사용자 이름 존재 여부 확인&#10;     */&#10;    boolean existsByUserName(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름 존재 여부 확인&#10;     */&#10;    boolean existsByUserNameAndIsActiveTrue(String userName);&#10;&#10;    /**&#10;     * 전화번호로 사용자 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByPhoneNumberContainingIgnoreCase(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndPhoneNumberContainingIgnoreCase(String phoneNumber);&#10;&#10;    /**&#10;     * 전체 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u&quot;)&#10;    long countAllUsers();&#10;&#10;    /**&#10;     * 활성화된 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.isActive = true&quot;)&#10;    long countActiveUsers();&#10;&#10;    /**&#10;     * 특정 위치를 포함하는 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.userLocation LIKE %:location%&quot;)&#10;    long countByUserLocationContaining(@Param(&quot;location&quot;) String location);&#10;&#10;    /**&#10;     * 전화번호를 가진 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.phoneNumber IS NOT NULL&quot;)&#10;    long countUsersWithPhoneNumber();&#10;&#10;    /**&#10;     * 위치 정보를 가진 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.userLocation IS NOT NULL&quot;)&#10;    long countUsersWithLocation();&#10;&#10;    /**&#10;     * 사용자 이름으로 정확히 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserName(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름으로 정확히 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndIsActiveTrue(String userName);&#10;&#10;&#10;&#10;    /**&#10;     * 사용자 이름과 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndPhoneNumber(String userName, String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름과 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndPhoneNumberAndIsActiveTrue(String userName, String phoneNumber);&#10;} " />
              <option name="updatedContent" value="package com.restaurant.reservation.repository;&#10;&#10;import com.restaurant.reservation.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * 사용자 정보를 관리하는 Repository&#10; * User 엔티티에 대한 데이터베이스 작업을 담당합니다.&#10; */&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;&#10;    /**&#10;     * 활성화된 사용자 목록 조회&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrue();&#10;&#10;    /**&#10;     * 전화번호로 사용자 검색&#10;     */&#10;    Optional&lt;User&gt; findByPhoneNumber(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByPhoneNumberAndIsActiveTrue(String phoneNumber);&#10;&#10;    /**&#10;     * 사용자 이름으로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByUserNameContainingIgnoreCase(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름으로 검색&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndUserNameContainingIgnoreCase(String userName);&#10;&#10;    /**&#10;     * 사용자 위치로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByUserLocationContainingIgnoreCase(String userLocation);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 위치로 검색&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndUserLocationContainingIgnoreCase(String userLocation);&#10;&#10;    /**&#10;     * 전화번호 존재 여부 확인&#10;     */&#10;    boolean existsByPhoneNumber(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호 존재 여부 확인&#10;     */&#10;    boolean existsByPhoneNumberAndIsActiveTrue(String phoneNumber);&#10;&#10;    /**&#10;     * 사용자 이름 존재 여부 확인&#10;     */&#10;    boolean existsByUserName(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름 존재 여부 확인&#10;     */&#10;    boolean existsByUserNameAndIsActiveTrue(String userName);&#10;&#10;    /**&#10;     * 전화번호로 사용자 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByPhoneNumberContainingIgnoreCase(String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 전화번호로 검색 (대소문자 구분 없음)&#10;     */&#10;    List&lt;User&gt; findByIsActiveTrueAndPhoneNumberContainingIgnoreCase(String phoneNumber);&#10;&#10;    /**&#10;     * 전체 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u&quot;)&#10;    long countAllUsers();&#10;&#10;    /**&#10;     * 활성화된 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.isActive = true&quot;)&#10;    long countActiveUsers();&#10;&#10;    /**&#10;     * 특정 위치를 포함하는 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.userLocation LIKE %:location%&quot;)&#10;    long countByUserLocationContaining(@Param(&quot;location&quot;) String location);&#10;&#10;    /**&#10;     * 전화번호를 가진 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.phoneNumber IS NOT NULL&quot;)&#10;    long countUsersWithPhoneNumber();&#10;&#10;    /**&#10;     * 위치 정보를 가진 사용자 수 조회&#10;     */&#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.userLocation IS NOT NULL&quot;)&#10;    long countUsersWithLocation();&#10;&#10;    /**&#10;     * 사용자 이름으로 정확히 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserName(String userName);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름으로 정확히 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndIsActiveTrue(String userName);&#10;&#10;&#10;&#10;    /**&#10;     * 사���자 이름과 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndPhoneNumber(String userName, String phoneNumber);&#10;&#10;    /**&#10;     * 활성화된 사용자 중 이름과 전화번호로 검색&#10;     */&#10;    Optional&lt;User&gt; findByUserNameAndPhoneNumberAndIsActiveTrue(String userName, String phoneNumber);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/service/BookingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/restaurant/reservation/service/BookingService.java" />
              <option name="originalContent" value="package com.restaurant.reservation.service;&#10;&#10;import com.restaurant.reservation.dto.BookingDto;&#10;import com.restaurant.reservation.entity.Booking;&#10;import com.restaurant.reservation.entity.BookingStatus;&#10;import com.restaurant.reservation.entity.Store;&#10;import com.restaurant.reservation.entity.User;&#10;import com.restaurant.reservation.repository.BookingRepository;&#10;import com.restaurant.reservation.repository.StoreRepository;&#10;import com.restaurant.reservation.repository.UserRepository;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * 예약 관련 비즈니스 로직을 처리하는 서비스&#10; * Booking 엔티티와 관련된 모든 비즈니스 로직을 담당합니다.&#10; */&#10;@Service&#10;@Transactional&#10;public class BookingService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(BookingService.class);&#10;&#10;    private final BookingRepository bookingRepository;&#10;    private final StoreRepository storeRepository;&#10;    private final UserRepository userRepository;&#10;&#10;    public BookingService(BookingRepository bookingRepository, &#10;                        StoreRepository storeRepository, &#10;                        UserRepository userRepository) {&#10;        this.bookingRepository = bookingRepository;&#10;        this.storeRepository = storeRepository;&#10;        this.userRepository = userRepository;&#10;    }&#10;&#10;    /**&#10;     * 모든 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getAllBookings() {&#10;        logger.info(&quot;모든 예약 목록 조회&quot;);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findAll();&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 특정 예약 조회&#10;     */&#10;    public BookingDto getBookingById(Long bookingNum) {&#10;        logger.info(&quot;예약 조회: bookingNum={}&quot;, bookingNum);&#10;        Optional&lt;Booking&gt; booking = bookingRepository.findById(bookingNum);&#10;        return booking.map(BookingDto::fromEntity).orElse(null);&#10;    }&#10;&#10;    /**&#10;     * 예약 생성&#10;     */&#10;    public BookingDto createBooking(BookingDto bookingDto) {&#10;        logger.info(&quot;예약 생성: storeId={}, userId={}&quot;, bookingDto.getStoreId(), bookingDto.getUserId());&#10;        &#10;        // 가게 존재 확인&#10;        Optional&lt;Store&gt; store = storeRepository.findById(bookingDto.getStoreId());&#10;        if (store.isEmpty()) {&#10;            logger.warn(&quot;가게를 찾을 수 없음: storeId={}&quot;, bookingDto.getStoreId());&#10;            throw new IllegalArgumentException(&quot;가게를 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        // 사용자 존재 확인&#10;        Optional&lt;User&gt; user = userRepository.findById(bookingDto.getUserId());&#10;        if (user.isEmpty()) {&#10;            logger.warn(&quot;사용자를 찾을 수 없음: userId={}&quot;, bookingDto.getUserId());&#10;            throw new IllegalArgumentException(&quot;사용자를 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        // 좌석 가용성 확인&#10;        Store storeEntity = store.get();&#10;        if (!storeEntity.hasAvailableSeats()) {&#10;            logger.warn(&quot;사용 가능한 좌석이 없음: storeId={}&quot;, bookingDto.getStoreId());&#10;            throw new IllegalArgumentException(&quot;사용 가능한 좌석이 없습니다.&quot;);&#10;        }&#10;&#10;        Booking booking = bookingDto.toEntity();&#10;        booking.setStore(storeEntity);&#10;        booking.setUser(user.get());&#10;        booking.setBookingStateCode(BookingStatus.PENDING);&#10;&#10;        // 좌석 사용량 증가&#10;        storeEntity.incrementUsingSeats();&#10;        storeRepository.save(storeEntity);&#10;&#10;        Booking savedBooking = bookingRepository.save(booking);&#10;        logger.info(&quot;예약 생성 완료: bookingNum={}&quot;, savedBooking.getBookingNum());&#10;        &#10;        return BookingDto.fromEntity(savedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 정보 수정&#10;     */&#10;    public BookingDto updateBooking(Long bookingNum, BookingDto bookingDto) {&#10;        logger.info(&quot;예약 정보 수정: bookingNum={}&quot;, bookingNum);&#10;        &#10;        Optional&lt;Booking&gt; existingBooking = bookingRepository.findById(bookingNum);&#10;        if (existingBooking.isEmpty()) {&#10;            logger.warn(&quot;예약을 찾을 수 없음: bookingNum={}&quot;, bookingNum);&#10;            throw new IllegalArgumentException(&quot;예약을 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        Booking booking = existingBooking.get();&#10;        booking.setBookingDate(bookingDto.getBookingDate());&#10;        booking.setCount(bookingDto.getCount());&#10;        booking.setSpecialRequests(bookingDto.getSpecialRequests());&#10;&#10;        Booking updatedBooking = bookingRepository.save(booking);&#10;        logger.info(&quot;예약 정보 수정 완료: bookingNum={}&quot;, updatedBooking.getBookingNum());&#10;        &#10;        return BookingDto.fromEntity(updatedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 상태 업데이트&#10;     */&#10;    public BookingDto updateBookingStatus(Long bookingNum, String status) {&#10;        logger.info(&quot;예약 상태 업데이트: bookingNum={}, status={}&quot;, bookingNum, status);&#10;        &#10;        Optional&lt;Booking&gt; booking = bookingRepository.findById(bookingNum);&#10;        if (booking.isEmpty()) {&#10;            logger.warn(&quot;예약을 찾을 수 없음: bookingNum={}&quot;, bookingNum);&#10;            throw new IllegalArgumentException(&quot;예약을 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        Booking existingBooking = booking.get();&#10;        BookingStatus newStatus = BookingStatus.valueOf(status.toUpperCase());&#10;        existingBooking.setBookingStateCode(newStatus);&#10;&#10;        // 취소된 경우 좌석 사용량 감소&#10;        if (newStatus == BookingStatus.CANCELLED) {&#10;            Store store = existingBooking.getStore();&#10;            store.decrementUsingSeats();&#10;            storeRepository.save(store);&#10;        }&#10;&#10;        Booking updatedBooking = bookingRepository.save(existingBooking);&#10;        logger.info(&quot;예약 상태 업데이트 완료: bookingNum={}, status={}&quot;, &#10;                   updatedBooking.getBookingNum(), updatedBooking.getBookingStateCode());&#10;        &#10;        return BookingDto.fromEntity(updatedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 취소&#10;     */&#10;    public BookingDto cancelBooking(Long bookingNum) {&#10;        logger.info(&quot;예약 취소: bookingNum={}&quot;, bookingNum);&#10;        return updateBookingStatus(bookingNum, &quot;CANCELLED&quot;);&#10;    }&#10;&#10;    /**&#10;     * 가게별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByStore(Long storeId) {&#10;        logger.info(&quot;가게별 예약 목록 조회: storeId={}&quot;, storeId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByStoreStoreId(storeId);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 사용자별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByUser(Long userId) {&#10;        logger.info(&quot;사용자별 예약 목록 조회: userId={}&quot;, userId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByUserUserId(userId);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 상태별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByStatus(String status) {&#10;        logger.info(&quot;상태별 예약 목록 조회: status={}&quot;, status);&#10;        BookingStatus bookingStatus = BookingStatus.valueOf(status.toUpperCase());&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingStateCode(bookingStatus);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 날짜 범위별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByDateRange(LocalDateTime startDate, LocalDateTime endDate) {&#10;        logger.info(&quot;날짜 범위별 예약 목록 조회: {}~{}&quot;, startDate, endDate);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingDateBetween(startDate, endDate);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 활성 예약 목록 조회 (PENDING, CONFIRMED 상태)&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookings() {&#10;        logger.info(&quot;활성 예약 목록 조회&quot;);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingStateCodeIn(&#10;                List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 가게의 활성 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookingsByStore(Long storeId) {&#10;        logger.info(&quot;가게의 활성 예약 목록 조회: storeId={}&quot;, storeId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByStoreStoreIdAndBookingStateCodeIn(&#10;                storeId, List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 사용자의 활성 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookingsByUser(Long userId) {&#10;        logger.info(&quot;사용자의 활성 예약 목록 조회: userId={}&quot;, userId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByUserUserIdAndBookingStateCodeIn(&#10;                userId, List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.restaurant.reservation.service;&#10;&#10;import com.restaurant.reservation.dto.BookingDto;&#10;import com.restaurant.reservation.entity.Booking;&#10;import com.restaurant.reservation.entity.BookingStatus;&#10;import com.restaurant.reservation.entity.Store;&#10;import com.restaurant.reservation.entity.User;&#10;import com.restaurant.reservation.repository.BookingRepository;&#10;import com.restaurant.reservation.repository.StoreRepository;&#10;import com.restaurant.reservation.repository.UserRepository;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * 예약 관련 비즈니스 로직을 처리하는 서비스&#10; * Booking 엔티티와 관련된 모든 비즈니스 로직을 담당합니다.&#10; */&#10;@Service&#10;@Transactional&#10;public class BookingService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(BookingService.class);&#10;&#10;    private final BookingRepository bookingRepository;&#10;    private final StoreRepository storeRepository;&#10;    private final UserRepository userRepository;&#10;&#10;    public BookingService(BookingRepository bookingRepository, &#10;                        StoreRepository storeRepository, &#10;                        UserRepository userRepository) {&#10;        this.bookingRepository = bookingRepository;&#10;        this.storeRepository = storeRepository;&#10;        this.userRepository = userRepository;&#10;    }&#10;&#10;    /**&#10;     * 모든 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getAllBookings() {&#10;        logger.info(&quot;모든 예약 목록 조회&quot;);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findAll();&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 특정 예약 조회&#10;     */&#10;    public BookingDto getBookingById(Long bookingNum) {&#10;        logger.info(&quot;예약 조회: bookingNum={}&quot;, bookingNum);&#10;        Optional&lt;Booking&gt; booking = bookingRepository.findById(bookingNum);&#10;        return booking.map(BookingDto::fromEntity).orElse(null);&#10;    }&#10;&#10;    /**&#10;     * 예약 생성&#10;     */&#10;    public BookingDto createBooking(BookingDto bookingDto) {&#10;        logger.info(&quot;예약 생성: storeId={}, userId={}&quot;, bookingDto.getStoreId(), bookingDto.getUserId());&#10;        &#10;        // 가게 존재 확인&#10;        Optional&lt;Store&gt; store = storeRepository.findById(bookingDto.getStoreId());&#10;        if (store.isEmpty()) {&#10;            logger.warn(&quot;가게를 찾을 수 없음: storeId={}&quot;, bookingDto.getStoreId());&#10;            throw new IllegalArgumentException(&quot;가게를 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        // 사용자 존재 확인&#10;        Optional&lt;User&gt; user = userRepository.findById(bookingDto.getUserId());&#10;        if (user.isEmpty()) {&#10;            logger.warn(&quot;사용자를 찾을 수 없음: userId={}&quot;, bookingDto.getUserId());&#10;            throw new IllegalArgumentException(&quot;사용자를 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        // 좌석 가용성 확인&#10;        Store storeEntity = store.get();&#10;        if (!storeEntity.hasAvailableSeats()) {&#10;            logger.warn(&quot;사용 가능한 좌석이 없음: storeId={}&quot;, bookingDto.getStoreId());&#10;            throw new IllegalArgumentException(&quot;사용 가능한 좌석이 없습니다.&quot;);&#10;        }&#10;&#10;        Booking booking = bookingDto.toEntity();&#10;        booking.setStore(storeEntity);&#10;        booking.setUser(user.get());&#10;        booking.setBookingStateCode(BookingStatus.PENDING);&#10;&#10;        // 좌석 사용량 증가&#10;        storeEntity.incrementUsingSeats();&#10;        storeRepository.save(storeEntity);&#10;&#10;        Booking savedBooking = bookingRepository.save(booking);&#10;        logger.info(&quot;예약 생성 완료: bookingNum={}&quot;, savedBooking.getBookingNum());&#10;        &#10;        return BookingDto.fromEntity(savedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 정보 수정&#10;     */&#10;    public BookingDto updateBooking(Long bookingNum, BookingDto bookingDto) {&#10;        logger.info(&quot;예약 정보 수정: bookingNum={}&quot;, bookingNum);&#10;        &#10;        Optional&lt;Booking&gt; existingBooking = bookingRepository.findById(bookingNum);&#10;        if (existingBooking.isEmpty()) {&#10;            logger.warn(&quot;예약을 찾을 수 없음: bookingNum={}&quot;, bookingNum);&#10;            throw new IllegalArgumentException(&quot;예약을 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        Booking booking = existingBooking.get();&#10;        booking.setBookingDate(bookingDto.getBookingDate());&#10;        booking.setCount(bookingDto.getCount());&#10;        booking.setSpecialRequests(bookingDto.getSpecialRequests());&#10;&#10;        Booking updatedBooking = bookingRepository.save(booking);&#10;        logger.info(&quot;예약 정보 수정 완료: bookingNum={}&quot;, updatedBooking.getBookingNum());&#10;        &#10;        return BookingDto.fromEntity(updatedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 상태 업데이트&#10;     */&#10;    public BookingDto updateBookingStatus(Long bookingNum, String status) {&#10;        logger.info(&quot;예약 상태 업데이트: bookingNum={}, status={}&quot;, bookingNum, status);&#10;        &#10;        Optional&lt;Booking&gt; booking = bookingRepository.findById(bookingNum);&#10;        if (booking.isEmpty()) {&#10;            logger.warn(&quot;예약을 찾을 수 없음: bookingNum={}&quot;, bookingNum);&#10;            throw new IllegalArgumentException(&quot;예약을 찾을 수 없습니다.&quot;);&#10;        }&#10;&#10;        Booking existingBooking = booking.get();&#10;        BookingStatus newStatus = BookingStatus.valueOf(status.toUpperCase());&#10;        existingBooking.setBookingStateCode(newStatus);&#10;&#10;        // 취소된 경우 좌석 사용량 감소&#10;        if (newStatus == BookingStatus.CANCELLED) {&#10;            Store store = existingBooking.getStore();&#10;            store.decrementUsingSeats();&#10;            storeRepository.save(store);&#10;        }&#10;&#10;        Booking updatedBooking = bookingRepository.save(existingBooking);&#10;        logger.info(&quot;예약 상태 업데이트 완료: bookingNum={}, status={}&quot;, &#10;                   updatedBooking.getBookingNum(), updatedBooking.getBookingStateCode());&#10;        &#10;        return BookingDto.fromEntity(updatedBooking);&#10;    }&#10;&#10;    /**&#10;     * 예약 취소&#10;     */&#10;    public BookingDto cancelBooking(Long bookingNum) {&#10;        logger.info(&quot;예약 취소: bookingNum={}&quot;, bookingNum);&#10;        return updateBookingStatus(bookingNum, &quot;CANCELLED&quot;);&#10;    }&#10;&#10;    /**&#10;     * 가게별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByStore(Long storeId) {&#10;        logger.info(&quot;가게별 예약 목록 조회: storeId={}&quot;, storeId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByStoreStoreId(storeId);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 사용자별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByUser(Long userId) {&#10;        logger.info(&quot;사용자별 예약 목록 조회: userId={}&quot;, userId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByUserUserId(userId);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 상태별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByStatus(String status) {&#10;        logger.info(&quot;상태별 예약 목록 조회: status={}&quot;, status);&#10;        BookingStatus bookingStatus = BookingStatus.valueOf(status.toUpperCase());&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingStateCode(bookingStatus);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 날짜 범위별 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getBookingsByDateRange(LocalDateTime startDate, LocalDateTime endDate) {&#10;        logger.info(&quot;날짜 범위별 예약 목록 조회: {}~{}&quot;, startDate, endDate);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingDateBetween(startDate, endDate);&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 활성 예약 목록 조회 (PENDING, CONFIRMED 상태)&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookings() {&#10;        logger.info(&quot;활성 예약 목록 조회&quot;);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByBookingStateCodeIn(&#10;                List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 가게의 활성 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookingsByStore(Long storeId) {&#10;        logger.info(&quot;가게의 활성 예약 목록 조회: storeId={}&quot;, storeId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByStoreStoreIdAndBookingStateCodeIn(&#10;                storeId, List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * 사용자의 활성 예약 목록 조회&#10;     */&#10;    public List&lt;BookingDto&gt; getActiveBookingsByUser(Long userId) {&#10;        logger.info(&quot;사용자의 활성 예약 목록 조회: userId={}&quot;, userId);&#10;        List&lt;Booking&gt; bookings = bookingRepository.findByUserUserIdAndBookingStateCodeIn(&#10;                userId, List.of(BookingStatus.PENDING, BookingStatus.CONFIRMED));&#10;        return bookings.stream()&#10;                .map(BookingDto::fromEntity)&#10;                .collect(Collectors.toList());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>