name: Build and Push to ECR

on:
  push:
    branches: [ main, master, store_sample_docker ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'Dockerfile'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build JAR and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write   # OIDC로 AWS 권한 위임

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build JAR
        run: ./gradlew clean bootJar --no-daemon

      # 권장: OIDC로 role을 통해 AWS 접근 (Secrets: AWS_ROLE_TO_ASSUME 필요)
      - name: Configure AWS credentials (OIDC)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 대안: Access Key 직접 사용 (Secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
      - name: Configure AWS credentials (Access Keys)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "Building ${IMAGE_URI}"
          docker build -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
          echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Summary
        run: echo "Pushed image ${{ steps.build-image.outputs.image }}"
